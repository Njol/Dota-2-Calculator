"use strict";

// generated on Mon Jun 20 10:27:07 CEST 2016

function Env(data) {
	this.abilities = [];
	this.agi = 0;
	this.agi_gain = 0;
	this.armor = 0;
	this.attack_damage_base = 0;
	this.attack_damage_base_bonus_mult_all = 0;
	this.attack_damage_base_bonus_mult_hero = 0;
	this.attack_damage_total = 0;
	this.attack_damage_total_bonus_mult = 0;
	this.attack_damage_total_with_crits = 0;
	this.attack_dps = 0;
	this.attack_dps_after_reductions = 0;
	this.attack_speed_all = 0;
	this.attack_speed_hero = 0;
	this.attacks_per_second = 0;
	this.base_attack_time = 0;
	this.base_id = "";
	this.block = [{"chance":1,"mults":{"amount":{"is_ranged":55,"is_melee":55}}}];
	this.bonus_damage_mag = [];
	this.bonus_damage_mag_on_attacked = [];
	this.bonus_damage_phy = [];
	this.bonus_damage_phy_on_attacked = [];
	this.bonus_damage_pure = [];
	this.bonus_damage_pure_on_attacked = [];
	this.bonus_dps_mag_on_attacked_rest = 0;
	this.bonus_dps_mag_on_attacked_single = 0;
	this.bonus_dps_mag_rest = 0;
	this.bonus_dps_mag_single = 0;
	this.bonus_dps_phy_on_attacked_rest = 0;
	this.bonus_dps_phy_on_attacked_single = 0;
	this.bonus_dps_phy_rest = 0;
	this.bonus_dps_phy_single = 0;
	this.bonus_dps_pure_on_attacked_rest = 0;
	this.bonus_dps_pure_on_attacked_single = 0;
	this.bonus_dps_pure_rest = 0;
	this.bonus_dps_pure_single = 0;
	this.built_from = [];
	this.cleave_mult = 0;
	this.cooldown = 0;
	this.cost = 0;
	this.crit = [];
	this.dps_aoe_after_reductions = 0;
	this.dps_mag_single_after_reductions = 0;
	this.dps_mag_total_after_reductions = 0;
	this.dps_phy_single_after_reductions = 0;
	this.dps_phy_total_after_reductions = 0;
	this.dps_pure_single_after_reductions = 0;
	this.dps_pure_total_after_reductions = 0;
	this.dps_single_after_reductions = 0;
	this.dps_total_after_reductions = 0;
	this.eff_hp_mag = 0;
	this.eff_hp_phy = 0;
	this.enemy_armor = 0;
	this.enemy_armor_mult = 1;
	this.enemy_attack_speed = 0;
	this.enemy_attacks_per_second = 0;
	this.enemy_base_movement_speed = 0;
	this.enemy_damage_phy_base_bonus_mult = 0;
	this.enemy_has_mana = 1;
	this.enemy_hit_chance_all = 1;
	this.enemy_hit_chance_hero = 1;
	this.enemy_is_building = 0;
	this.enemy_is_creep = 0;
	this.enemy_is_creep_and_hero_is_melee = 0;
	this.enemy_is_creep_and_hero_is_ranged = 0;
	this.enemy_is_hero = 1;
	this.enemy_movement_speed_bonus_mult = 0;
	this.enemy_vulnerability_all = 1;
	this.enemy_vulnerability_mag = 1;
	this.enemy_vulnerability_phy = 1;
	this.enemy_vulnerability_phy_basic = 1;
	this.enemy_vulnerability_phy_hero = 1;
	this.enemy_vulnerability_phy_pierce = 1;
	this.enemy_vulnerability_pure = 1;
	this.has_scepter = 0;
	this.hit_chance_all = 1;
	this.hit_chance_hero = 1;
	this.hp = 0;
	this.hp_regen = 0;
	this.hp_regen_per_attack = 0;
	this.hp_regen_per_attack_evadable = 0;
	this.illusion = [];
	this.illusions_bonus_damage_phy = 0;
	this.int = 0;
	this.int_gain = 0;
	this.is_consumable = false;
	this.is_melee = 1;
	this.is_ranged = 1;
	this.is_ultimate = 0;
	this.level = 0;
	this.level_max = 0;
	this.levels = [];
	this.lifesteal = 0;
	this.mana_cost = 0;
	this.movement_speed = 0;
	this.movement_speed_bonus_mult = 0;
	this.movement_speed_max = 0;
	this.mp = 0;
	this.mp_regen = 0;
	this.mp_regen_base = 0;
	this.mp_regen_base_bonus_mult = 0;
	this.mp_regen_per_attack = 0;
	this.name = "";
	this.num_additional_enemies = 0;
	this.orchid_mult = 0;
	this.primary_attribute = "";
	this.primary_attribute_value = 0;
	this.spell_cooldown_mult = 1;
	this.spell_damage_bonus_mult = 0;
	this.spell_dps_mag_aoe = 0;
	this.spell_dps_mag_single = 0;
	this.spell_dps_phy_aoe = 0;
	this.spell_dps_phy_single = 0;
	this.spell_dps_pure_aoe = 0;
	this.spell_dps_pure_single = 0;
	this.spell_lifesteal = 0;
	this.stacks = 0;
	this.stacks_max = 0;
	this.stacks_name = "stacks";
	this.str = 0;
	this.str_gain = 0;
	this.summon = [];
	this.treat_evasion_as_phy_resist = true;
	this.true_strike_chance_all = 0;
	this.true_strike_chance_hero = 0;
	this.vulnerability_all = 1;
	this.vulnerability_mag = 1;
	this.vulnerability_phy = 1;
	this.vulnerability_pure = 1;
	
	if (data) {
		for (var i in data)
			this[i] = data[i];
	}
};

Env.prototype.addToThis = function(other) {
	// abilities ignored;
	this.agi += other.agi;
	this.agi_gain += other.agi_gain;
	this.armor += other.armor;
	this.attack_damage_base += other.attack_damage_base;
	this.attack_damage_base_bonus_mult_all += other.attack_damage_base_bonus_mult_all;
	this.attack_damage_base_bonus_mult_hero += other.attack_damage_base_bonus_mult_hero;
	this.attack_damage_total += other.attack_damage_total;
	this.attack_damage_total_bonus_mult += other.attack_damage_total_bonus_mult;
	this.attack_speed_all += other.attack_speed_all;
	this.attack_speed_hero += other.attack_speed_hero;
	this.attacks_per_second += other.attacks_per_second;
	this.base_attack_time = other.base_attack_time == 0 ? this.base_attack_time : this.base_attack_time == 0 ? other.base_attack_time : Math.min(this.base_attack_time, other.base_attack_time);
	// base_id ignored;
	this.block = this.block.concat(cloneArray(other.block));
	this.bonus_damage_mag = this.bonus_damage_mag.concat(cloneArray(other.bonus_damage_mag));
	this.bonus_damage_mag_on_attacked = this.bonus_damage_mag_on_attacked.concat(cloneArray(other.bonus_damage_mag_on_attacked));
	this.bonus_damage_phy = this.bonus_damage_phy.concat(cloneArray(other.bonus_damage_phy));
	this.bonus_damage_phy_on_attacked = this.bonus_damage_phy_on_attacked.concat(cloneArray(other.bonus_damage_phy_on_attacked));
	this.bonus_damage_pure = this.bonus_damage_pure.concat(cloneArray(other.bonus_damage_pure));
	this.bonus_damage_pure_on_attacked = this.bonus_damage_pure_on_attacked.concat(cloneArray(other.bonus_damage_pure_on_attacked));
	// built_from ignored;
	this.cleave_mult += other.cleave_mult;
	// cooldown ignored;
	this.cost += other.cost;
	this.crit = this.crit.concat(cloneArray(other.crit));
	this.dps_mag_single_after_reductions += other.dps_mag_single_after_reductions;
	this.dps_mag_total_after_reductions += other.dps_mag_total_after_reductions;
	this.dps_phy_single_after_reductions += other.dps_phy_single_after_reductions;
	this.dps_phy_total_after_reductions += other.dps_phy_total_after_reductions;
	this.dps_pure_single_after_reductions += other.dps_pure_single_after_reductions;
	this.dps_pure_total_after_reductions += other.dps_pure_total_after_reductions;
	this.eff_hp_mag += other.eff_hp_mag;
	this.eff_hp_phy += other.eff_hp_phy;
	this.enemy_armor += other.enemy_armor;
	this.enemy_armor_mult *= other.enemy_armor_mult;
	this.enemy_attack_speed += other.enemy_attack_speed;
	this.enemy_attacks_per_second += other.enemy_attacks_per_second;
	this.enemy_base_movement_speed = Math.min(this.enemy_base_movement_speed, other.enemy_base_movement_speed);
	this.enemy_damage_phy_base_bonus_mult += other.enemy_damage_phy_base_bonus_mult;
	this.enemy_hit_chance_all *= other.enemy_hit_chance_all;
	this.enemy_hit_chance_hero *= other.enemy_hit_chance_hero;
	this.enemy_movement_speed_bonus_mult += other.enemy_movement_speed_bonus_mult;
	this.enemy_vulnerability_all *= other.enemy_vulnerability_all;
	this.enemy_vulnerability_mag *= other.enemy_vulnerability_mag;
	this.enemy_vulnerability_phy *= other.enemy_vulnerability_phy;
	this.enemy_vulnerability_phy_basic *= other.enemy_vulnerability_phy_basic;
	this.enemy_vulnerability_phy_hero *= other.enemy_vulnerability_phy_hero;
	this.enemy_vulnerability_phy_pierce *= other.enemy_vulnerability_phy_pierce;
	this.enemy_vulnerability_pure *= other.enemy_vulnerability_pure;
	this.has_scepter = Math.max(this.has_scepter, other.has_scepter);
	this.hit_chance_all *= other.hit_chance_all;
	this.hit_chance_hero *= other.hit_chance_hero;
	this.hp += other.hp;
	this.hp_regen += other.hp_regen;
	this.hp_regen_per_attack += other.hp_regen_per_attack;
	this.hp_regen_per_attack_evadable += other.hp_regen_per_attack_evadable;
	this.illusion = this.illusion.concat(cloneArray(other.illusion));
	// illusions_bonus_damage_phy ignored;
	this.int += other.int;
	this.int_gain += other.int_gain;
	// is_consumable ignored;
	this.is_melee *= other.is_melee;
	this.is_ranged *= other.is_ranged;
	// is_ultimate ignored;
	// level ignored;
	// level_max ignored;
	if (other.levels.length > 0) {var e = new Env(other.levels[other.level]); e.stacks = other.stacks; this.addToThis(e);};
	this.lifesteal += other.lifesteal;
	// mana_cost ignored;
	this.movement_speed += other.movement_speed;
	this.movement_speed_bonus_mult += other.movement_speed_bonus_mult;
	this.movement_speed_max = Math.max(this.movement_speed_max, other.movement_speed_max);
	this.mp += other.mp;
	this.mp_regen += other.mp_regen;
	this.mp_regen_base += other.mp_regen_base;
	this.mp_regen_base_bonus_mult += other.mp_regen_base_bonus_mult;
	this.mp_regen_per_attack += other.mp_regen_per_attack;
	this.name = other.name == '' ? this.name : other.name;
	this.orchid_mult += other.orchid_mult;
	this.primary_attribute = this.primary_attribute == '' ? other.primary_attribute : this.primary_attribute;
	this.primary_attribute_value += other.primary_attribute_value;
	this.spell_cooldown_mult *= other.spell_cooldown_mult;
	this.spell_damage_bonus_mult += other.spell_damage_bonus_mult;
	this.spell_dps_mag_aoe += other.spell_dps_mag_aoe;
	this.spell_dps_mag_single += other.spell_dps_mag_single;
	this.spell_dps_phy_aoe += other.spell_dps_phy_aoe;
	this.spell_dps_phy_single += other.spell_dps_phy_single;
	this.spell_dps_pure_aoe += other.spell_dps_pure_aoe;
	this.spell_dps_pure_single += other.spell_dps_pure_single;
	this.spell_lifesteal += other.spell_lifesteal;
	// stacks_max ignored;
	// stacks_name ignored;
	this.str += other.str;
	this.str_gain += other.str_gain;
	this.summon = this.summon.concat(cloneArray(other.summon));
	this.true_strike_chance_all = 1 - (1 - this.true_strike_chance_all) * (1 - other.true_strike_chance_all);
	this.true_strike_chance_hero = 1 - (1 - this.true_strike_chance_hero) * (1 - other.true_strike_chance_hero);
	this.vulnerability_all *= other.vulnerability_all;
	this.vulnerability_mag *= other.vulnerability_mag;
	this.vulnerability_phy *= other.vulnerability_phy;
	this.vulnerability_pure *= other.vulnerability_pure;
	this.mults = addObjects(this.mults, other.mults);
	for (var attr in other.mults) {
		if (other.stacks && other.mults[attr].stacks)
			this[attr] += other.stacks * other.mults[attr].stacks;
	}
};

Env.prototype.calculate = function() {
	var BONUS_DPS_MAG;
	var BONUS_DPS_MAG_ON_ATTACKED;
	var BONUS_DPS_PHY;
	var BONUS_DPS_PHY_ON_ATTACKED;
	var BONUS_DPS_PURE;
	var BONUS_DPS_PURE_ON_ATTACKED;
	
	this.attack_speed_all = Math.min(500.0, Math.max(-80.0, this.attack_speed_all));
	this.agi += (this.agi_gain * (this.level - 1)) + ((((this.mults || {}).agi || {}).stacks || 0) * this.stacks);
	this.armor += (0.14 * this.agi) + ((((this.mults || {}).armor || {}).stacks || 0) * this.stacks);
	this.attack_damage_total_bonus_mult += (((this.mults || {}).attack_damage_total_bonus_mult || {}).has_scepter || 0) * this.has_scepter;
	this.attack_speed_hero = Math.min(600.0, Math.max(20.0, (this.attack_speed_hero + (((this.mults || {}).attack_speed_hero || {}).stacks || 0) * this.stacks) + this.agi + this.attack_speed_all));
	this.attacks_per_second += ((this.attack_speed_hero / 100 / this.base_attack_time) + ((((this.mults || {}).attacks_per_second || {}).num_additional_enemies || 0) * this.num_additional_enemies)) + ((((this.mults || {}).attacks_per_second || {}).is_melee || 0) * this.is_melee);
	this.block.forEach(function(_) {_.amount = (_.amount || 0) + (((_.mults || {}).amount || {}).is_melee || 0) * this.is_melee; _.amount = (_.amount || 0) + (((_.mults || {}).amount || {}).is_ranged || 0) * this.is_ranged; _.chance = (_.chance || 1) + (((_.mults || {}).chance || {}).enemy_is_hero || 0) * this.enemy_is_hero;}, this);
	this.cleave_mult = (this.cleave_mult + (((this.mults || {}).cleave_mult || {}).has_scepter || 0) * this.has_scepter) * (1 - this.enemy_is_building);
	this.crit.forEach(function(_) {_.multiplier = (_.multiplier || 0) + (((_.mults || {}).multiplier || {}).enemy_is_creep || 0) * this.enemy_is_creep; _.multiplier = (_.multiplier || 0) + (((_.mults || {}).multiplier || {}).enemy_is_hero || 0) * this.enemy_is_hero;}, this);
	this.enemy_armor += (((this.mults || {}).enemy_armor || {}).stacks || 0) * this.stacks;
	this.enemy_attack_speed += ((((this.mults || {}).enemy_attack_speed || {}).is_ranged || 0) * this.is_ranged) + ((((this.mults || {}).enemy_attack_speed || {}).is_melee || 0) * this.is_melee);
	this.enemy_has_mana *= 1 - this.enemy_is_building;
	this.enemy_is_creep_and_hero_is_melee = this.enemy_is_creep * this.is_melee;
	this.enemy_is_creep_and_hero_is_ranged = this.enemy_is_creep * this.is_ranged;
	this.attack_damage_base_bonus_mult_hero += ((this.attack_damage_base_bonus_mult_all) + ((((this.mults || {}).attack_damage_base_bonus_mult_hero || {}).enemy_is_creep_and_hero_is_ranged || 0) * this.enemy_is_creep_and_hero_is_ranged)) + ((((this.mults || {}).attack_damage_base_bonus_mult_hero || {}).enemy_is_creep_and_hero_is_melee || 0) * this.enemy_is_creep_and_hero_is_melee);
	this.enemy_movement_speed_bonus_mult += (((((this.mults || {}).enemy_movement_speed_bonus_mult || {}).is_ranged || 0) * this.is_ranged) + ((((this.mults || {}).enemy_movement_speed_bonus_mult || {}).is_melee || 0) * this.is_melee)) + ((((this.mults || {}).enemy_movement_speed_bonus_mult || {}).stacks || 0) * this.stacks);
	this.enemy_vulnerability_mag *= (this.enemy_vulnerability_all) * (1 - this.enemy_is_building);
	this.enemy_vulnerability_phy *= (1 - 0.06 * this.enemy_armor / (1 + Math.abs(0.06 * this.enemy_armor))) * (this.enemy_vulnerability_all);
	this.enemy_vulnerability_phy_basic *= (1 - (1 - 0.75) * this.enemy_is_hero) * (1 - (1 - 0.7) * this.enemy_is_building);
	this.enemy_vulnerability_phy_hero *= 1 - (1 - 0.5) * this.enemy_is_building;
	this.enemy_vulnerability_phy_pierce *= ((1 - (1 - 0.5) * this.enemy_is_hero) * (1 - (1 - 1.5) * this.enemy_is_creep)) * (1 - (1 - 0.35) * this.enemy_is_building);
	this.enemy_vulnerability_pure *= (this.enemy_vulnerability_all) * (1 - this.enemy_is_building);
	this.hit_chance_all = 1 - (1 - this.hit_chance_all) * (1 - this.true_strike_chance_all);
	this.hit_chance_hero = 1 - (1 - this.hit_chance_hero * this.hit_chance_all) * (1 - this.true_strike_chance_hero);
	this.hp_regen_per_attack_evadable += (((this.mults || {}).hp_regen_per_attack_evadable || {}).stacks || 0) * this.stacks;
	this.illusion.forEach(function(_) {_.damage_dealt_mult = (_.damage_dealt_mult || 1) + (((_.mults || {}).damage_dealt_mult || {}).is_ranged || 0) * this.is_ranged; _.damage_taken_mult = (_.damage_taken_mult || 1) + (((_.mults || {}).damage_taken_mult || {}).is_ranged || 0) * this.is_ranged; _.damage_dealt_mult = (_.damage_dealt_mult || 1) + (((_.mults || {}).damage_dealt_mult || {}).is_melee || 0) * this.is_melee; _.damage_taken_mult = (_.damage_taken_mult || 1) + (((_.mults || {}).damage_taken_mult || {}).is_melee || 0) * this.is_melee;}, this);
	this.illusions_bonus_damage_phy += ((((this.mults || {}).illusions_bonus_damage_phy || {}).is_ranged || 0) * this.is_ranged) + ((((this.mults || {}).illusions_bonus_damage_phy || {}).is_melee || 0) * this.is_melee);
	this.int += (this.int_gain * (this.level - 1)) + ((((this.mults || {}).int || {}).stacks || 0) * this.stacks);
	this.lifesteal += ((((this.mults || {}).lifesteal || {}).is_melee || 0) * this.is_melee) + ((((this.mults || {}).lifesteal || {}).is_ranged || 0) * this.is_ranged);
	this.bonus_dps_mag_on_attacked_single = (BONUS_DPS_MAG_ON_ATTACKED = bonus_damage(this, this.bonus_damage_mag_on_attacked, this.lifesteal, this.num_additional_enemies, this.enemy_attacks_per_second, this.enemy_hit_chance_hero)).single;
	this.bonus_dps_mag_on_attacked_rest = BONUS_DPS_MAG_ON_ATTACKED.rest; // depends on this.bonus_dps_mag_on_attacked_single;
	this.bonus_dps_pure_on_attacked_single = (BONUS_DPS_PURE_ON_ATTACKED = bonus_damage(this, this.bonus_damage_pure_on_attacked, this.lifesteal, this.num_additional_enemies, this.enemy_attacks_per_second, this.enemy_hit_chance_hero)).single;
	this.bonus_dps_pure_on_attacked_rest = BONUS_DPS_PURE_ON_ATTACKED.rest; // depends on this.bonus_dps_pure_on_attacked_single;
	this.movement_speed_bonus_mult += (((((this.mults || {}).movement_speed_bonus_mult || {}).is_ranged || 0) * this.is_ranged) + ((((this.mults || {}).movement_speed_bonus_mult || {}).is_melee || 0) * this.is_melee)) + ((((this.mults || {}).movement_speed_bonus_mult || {}).stacks || 0) * this.stacks);
	this.movement_speed = Math.min(this.movement_speed_max, Math.max(100.0, this.movement_speed * (1 + this.movement_speed_bonus_mult)));
	this.bonus_damage_mag.forEach(function(_) {_.chance = (_.chance || 0) + (((_.mults || {}).chance || {}).is_melee || 0) * this.is_melee; _.chance = (_.chance || 0) + (((_.mults || {}).chance || {}).is_ranged || 0) * this.is_ranged; _.damage = (_.damage || 0) + (((_.mults || {}).damage || {}).movement_speed || 0) * this.movement_speed;}, this);
	this.bonus_dps_mag_single = (BONUS_DPS_MAG = bonus_damage(this, this.bonus_damage_mag, this.lifesteal, this.num_additional_enemies, this.attacks_per_second, this.hit_chance_hero)).single;
	this.bonus_dps_mag_rest = BONUS_DPS_MAG.rest; // depends on this.bonus_dps_mag_single;
	this.mp += 12.0 * this.int;
	this.mp_regen_base += 0.04 * this.int;
	this.mp_regen += (((this.mp_regen_base * (1 + this.mp_regen_base_bonus_mult)) + (this.mp_regen_per_attack * this.attacks_per_second)) + ((((this.mults || {}).mp_regen || {}).mp || 0) * this.mp)) + ((((this.mults || {}).mp_regen || {}).stacks || 0) * this.stacks);
	this.spell_damage_bonus_mult += 6.25E-4 * this.int;
	this.spell_dps_pure_single += this.spell_dps_pure_aoe;
	this.spell_lifesteal += ((((this.mults || {}).spell_lifesteal || {}).enemy_is_hero || 0) * this.enemy_is_hero) + ((((this.mults || {}).spell_lifesteal || {}).enemy_is_creep || 0) * this.enemy_is_creep);
	this.str += (this.str_gain * (this.level - 1)) + ((((this.mults || {}).str || {}).stacks || 0) * this.stacks);
	this.hp += 20.0 * this.str;
	this.primary_attribute_value += this[this.primary_attribute]; // uses this.agi, this.int, this.str;
	this.attack_damage_base += this.primary_attribute_value;
	this.attack_damage_total = (((this.attack_damage_total + (((this.mults || {}).attack_damage_total || {}).primary_attribute_value || 0) * this.primary_attribute_value) + (((this.mults || {}).attack_damage_total || {}).stacks || 0) * this.stacks) + this.attack_damage_base * (1 + this.attack_damage_base_bonus_mult_hero)) * (1 + this.attack_damage_total_bonus_mult);
	this.attack_damage_total_with_crits += this.attack_damage_total * (1 + (crits(this.crit) - 1) * (1 - this.enemy_is_building));
	this.attack_dps = this.attack_damage_total_with_crits * this.attacks_per_second * this.hit_chance_hero;
	this.attack_dps_after_reductions = this.attack_dps * this.enemy_vulnerability_phy * this.enemy_vulnerability_phy_hero;
	this.bonus_damage_phy.forEach(function(_) {_.damage = (_.damage || 0) + (((_.mults || {}).damage || {}).stacks || 0) * this.stacks; _.damage = (_.damage || 0) + (((_.mults || {}).damage || {}).primary_attribute_value || 0) * this.primary_attribute_value; _.damage = (_.damage || 0) + (((_.mults || {}).damage || {}).attack_damage_total || 0) * this.attack_damage_total;}, this);
	this.bonus_damage_phy_on_attacked.forEach(function(_) {_.damage = (_.damage || 0) + (((_.mults || {}).damage || {}).primary_attribute_value || 0) * this.primary_attribute_value; _.damage = (_.damage || 0) + (((_.mults || {}).damage || {}).attack_damage_total || 0) * this.attack_damage_total;}, this);
	this.bonus_damage_pure.forEach(function(_) {_.damage = (_.damage || 0) + (((_.mults || {}).damage || {}).mp || 0) * this.mp; _.damage = (_.damage || 0) + (((_.mults || {}).damage || {}).primary_attribute_value || 0) * this.primary_attribute_value;}, this);
	this.bonus_dps_phy_on_attacked_single = (BONUS_DPS_PHY_ON_ATTACKED = bonus_damage(this, this.bonus_damage_phy_on_attacked, this.lifesteal, this.num_additional_enemies, this.enemy_attacks_per_second, this.enemy_hit_chance_hero)).single;
	this.bonus_dps_phy_on_attacked_rest = BONUS_DPS_PHY_ON_ATTACKED.rest; // depends on this.bonus_dps_phy_on_attacked_single;
	this.bonus_dps_phy_single = (BONUS_DPS_PHY = bonus_damage(this, this.bonus_damage_phy, this.lifesteal, this.num_additional_enemies, this.attacks_per_second, this.hit_chance_hero)).single;
	this.bonus_dps_phy_rest = BONUS_DPS_PHY.rest; // depends on this.bonus_dps_phy_single;
	this.bonus_dps_pure_single = (BONUS_DPS_PURE = bonus_damage(this, this.bonus_damage_pure, this.lifesteal, this.num_additional_enemies, this.attacks_per_second, this.hit_chance_hero)).single;
	this.bonus_dps_pure_rest = BONUS_DPS_PURE.rest; // depends on this.bonus_dps_pure_single;
	this.dps_pure_single_after_reductions += (1 + this.spell_damage_bonus_mult) * this.enemy_vulnerability_pure * (this.spell_dps_pure_single + (this.bonus_dps_pure_single + this.bonus_dps_pure_on_attacked_single) * (1 - this.enemy_is_building));
	this.dps_pure_total_after_reductions += this.dps_pure_single_after_reductions + (1 + this.spell_damage_bonus_mult) * this.enemy_vulnerability_pure * (this.spell_dps_pure_aoe * this.num_additional_enemies + (this.bonus_dps_pure_rest + this.bonus_dps_pure_on_attacked_rest) * (1 - this.enemy_is_building));
	this.hp_regen += (((((((0.03 * this.str) + (this.hp_regen_per_attack * this.attacks_per_second)) + (this.hp_regen_per_attack_evadable * this.attacks_per_second * this.hit_chance_hero)) + (this.lifesteal * this.attack_dps_after_reductions)) + ((((this.mults || {}).hp_regen || {}).hp || 0) * this.hp)) + ((((this.mults || {}).hp_regen || {}).primary_attribute_value || 0) * this.primary_attribute_value)) + ((((this.mults || {}).hp_regen || {}).stacks || 0) * this.stacks)) + ((((this.mults || {}).hp_regen || {}).bonus_dps_phy_on_attacked_single || 0) * this.bonus_dps_phy_on_attacked_single);
	this.spell_dps_mag_single += ((this.spell_dps_mag_aoe) + ((((this.mults || {}).spell_dps_mag_single || {}).primary_attribute_value || 0) * this.primary_attribute_value)) + ((((this.mults || {}).spell_dps_mag_single || {}).enemy_has_mana || 0) * this.enemy_has_mana);
	this.dps_mag_single_after_reductions += (1 + this.spell_damage_bonus_mult) * this.enemy_vulnerability_mag * (this.spell_dps_mag_single + (this.bonus_dps_mag_single + this.bonus_dps_mag_on_attacked_single) * (1 - this.enemy_is_building));
	this.dps_mag_total_after_reductions += this.dps_mag_single_after_reductions + (1 + this.spell_damage_bonus_mult) * this.enemy_vulnerability_mag * (this.spell_dps_mag_aoe * this.num_additional_enemies + (this.bonus_dps_mag_rest + this.bonus_dps_mag_on_attacked_rest) * (1 - this.enemy_is_building));
	this.spell_dps_phy_single += (((this.spell_dps_phy_aoe) + ((((this.mults || {}).spell_dps_phy_single || {}).stacks || 0) * this.stacks)) + ((((this.mults || {}).spell_dps_phy_single || {}).hit_chance_hero || 0) * this.hit_chance_hero)) + ((((this.mults || {}).spell_dps_phy_single || {}).attack_damage_total || 0) * this.attack_damage_total);
	this.summon.forEach(function(_) {_.attack_damage_basic_bonus = (_.attack_damage_basic_bonus || 0) + (((_.mults || {}).attack_damage_basic_bonus || {}).enemy_has_mana || 0) * this.enemy_has_mana;}, this);
	this.dps_phy_single_after_reductions += (((1 + this.spell_damage_bonus_mult) * this.enemy_vulnerability_phy * (this.spell_dps_phy_single + (this.bonus_dps_phy_single + this.bonus_dps_phy_on_attacked_single) * (1 - this.enemy_is_building))) + (this.attack_dps_after_reductions)) + (summons(this.summon, this.attack_speed_all, this.attack_damage_base_bonus_mult_all, this.hit_chance_all, this.enemy_vulnerability_phy, this.enemy_vulnerability_phy_basic, this.enemy_vulnerability_phy_hero, this.enemy_vulnerability_phy_pierce));
	this.dps_phy_total_after_reductions += (this.is_melee * this.cleave_mult * this.attack_dps * this.num_additional_enemies * (1 + this.spell_damage_bonus_mult) * this.enemy_vulnerability_phy_hero) + (this.dps_phy_single_after_reductions + (1 + this.spell_damage_bonus_mult) * this.enemy_vulnerability_phy * (this.spell_dps_phy_aoe * this.num_additional_enemies + (this.bonus_dps_phy_rest + this.bonus_dps_phy_on_attacked_rest) * (1 - this.enemy_is_building)));
	this.dps_single_after_reductions += this.dps_mag_single_after_reductions + this.dps_phy_single_after_reductions + this.dps_pure_single_after_reductions;
	this.dps_total_after_reductions += this.dps_mag_total_after_reductions + this.dps_phy_total_after_reductions + this.dps_pure_total_after_reductions;
	this.vulnerability_mag *= this.vulnerability_all;
	this.eff_hp_mag += this.hp / this.vulnerability_mag;
	this.vulnerability_phy *= ((1 - 0.06 * this.armor / (1 + Math.abs(0.06 * this.armor))) * (this.treat_evasion_as_phy_resist ? this.enemy_hit_chance_hero : 1)) * (this.vulnerability_all);
	this.eff_hp_phy += this.hp / this.vulnerability_phy;
	this.vulnerability_pure *= this.vulnerability_all;
	
	var orchid_dps = this.orchid_mult * this.dps_single_after_reductions * this.enemy_vulnerability_mag * (1 + this.spell_damage_bonus_mult);
	this.dps_mag_single_after_reductions += orchid_dps;
	this.dps_mag_total_after_reductions += orchid_dps;
	this.dps_single_after_reductions += orchid_dps;
	this.dps_total_after_reductions += orchid_dps;
};
